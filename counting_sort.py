def counting_sort(a: list) -> list:
    """
    Функция реализует сортировку подсчетом.
    Она принимает на вход список, сортирует его по неубыванию и возвращает отсортированный список.

    :param a: list - список, который необходимо отсортировать.
    :return: list - отсортированный список.
    """

    #  находим минимальное и максимальное значение в списке - это границы диапазона сортировки
    minimum, maximum = min(a), max(a)

    # создаем список счетчиков длиной в диапазон возможных значений в списке
    counts = [0] * (maximum - minimum + 1)

    for n in a:
        # если минимум - отрицательное число, все индексы счетчиков увеличатся на модуль минимума
        # например, если минимум = - 10, его индекс = -10 + 10 = 0, а у числа 10 тогда индекс = 10 + 10 = 20

        # если минимум - положительное число, все индексы счетчиков уменьшаться на значение минимума
        # например, минимум = 10, его индекс = 10 - 10 = 0, тогда у числа 30 индекс = 30 - 10 = 20

        # если минимум - ноль, смещение не требуется
        counts[n - minimum] += 1

    a.clear()
    for i in range(len(counts)):
        # чтобы из списка счетчиков получить значение элемента, необходимо к индексу счетчика прибавить
        # значение минимума

        # например, если минимум был -10, то по индексу 0 хранится количество вхождений в список числа 0 - 10 = -10

        # если минимум был 10, то по индексу 0 хранится количество вхождений в список числа 0 + 10 = 10

        # если минимум равен нулю, то индекс счетчика числа и есть нужное нам число
        a.extend([i + minimum] * counts[i])

    return a

